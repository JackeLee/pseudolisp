TODO
----
Formatovany vystup:
	(format t "~%Predali jste ~s" a)

??? zmenit syntaxi def na [def [jmeno-fce parametry ...] ]
??? nefunguje [def ahoj[n] n] <~ treba opravit za ~> [def ahoj [n] n]

Dopsat vsude komentare :-)
Sofistikovanejsi hlaseni chyb
Nemelo by zaviset na poradi definic funkci!
Pridat funkce na porovnavani symbolu

Optimalizovat hashovani!
Při spuštění souboru nakonec volat main.
Jak delat skladani funkci? -> Hladovy zpusob dozirani parametru

V Makefile lreadline jen u reader.c
U readline nastavit normalni TAB (+ treba i s doplnovanim)

stav sveta ??

Vysledek volani = posledni vyraz -> def muze vracet funkci?

----------------------------------------------
BUGREPORT:
---------
Vypisovani rekurzivnich funkci v DEBUG modu je nekonecne

GC neodalokuje vse - viz to_test/fib
GC dokaze udelat stack overflow - viz to_test/parse-test

----------------------------------------------
Potencionalni leaky:
	pri pamatovani jmen vseho, z hashe se nemazou

----------------------------------------------
Do dokumentace
	zminit tail rekurzi
	closures

----------------------------------------------
rozmyslet zda nema byt u Tanku i aktualni pocet parametru
= rychlejsi pri porovnavani zda je to jeste tank, nebo vysledek tanku
= pomalejsi pri pripojovani parametru, ale stejne se tenhle pruchod musi provist
  takze se mozna vlastne provede dopredu

Slozitejsi GC:
	http://bredy.vyletnici.net/?g=clanek&c=239

kouknout se na isatty - vstup z terminalu/standartni

----------------------------------------------
Bonus
defm = definice memorizovane funkce u ktere se pamatuji vysledky

Nejak takto:?
	[defm fib [1] 1]
	[defm fib [2] 1]
	[defm fib [n] [+ [fib [- n 1]] [fib [- n 2]]]]

----------------------------------------------
Co tohle?

List comprehension
	http://en.wikipedia.org/wiki/List_comprehension

Clojure
	http://clojure.org/functional_programming

----------------------------------------------

Nejake odkazy
	http://itblob.havrlant.net/lisp-iii
	http://www.ceng.metu.edu.tr/~ucoluk/research/lisp/lispman/lispman.html
