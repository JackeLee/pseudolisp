nefunguje [def ahoj[n] n] <~ treba opravit za ~> [def ahoj [n] n]

- Nemelo by zaviset na poradi definic funkci!

----------------------------------------------
TODO
----
Formatovany vystup:
	(format t "~%Predali jste ~s" a)

??? zmenit syntaxi def na [def [jmeno-fce parametry ...] ]

Zlidstit parser.c + udelat kontroly preteceni
Dopsat vsude komentare :-)

Zasobnikove vyhodnocovani!
Optimalizovat hashovani!
Promyslet collect u GC!

Vysledek volani = posledni vyraz -> def muze vracet funkci?

----------------------------------------------
BUGREPORT:
---------

Neni to vic nez driv?
~~> [def fib [n]
~~> 	[if [> n 1]
~~> 		[+ [fib [- n 2]] [fib [- n  1]]]
~~> 		1
~~> 	]
~~> ]
OK.
~~> [fib 15]
Number: 987
~~>
82949 collected


[def a [] [append 1 [a]]]
[head [a]] ~> diverguje!!
=> Bud opravit APPEND, nebo to prepsat podle MJova hintu :-/

----------------------------------------------
Potencionalni leaky:
	pri pamatovani jmen vseho, z hashe se nemazou

----------------------------------------------

stav sveta - jak na nej?
porovnavani symbolu

prace s prameti a GC

rozmyslet zda nema byt u Tanku i aktualni pocet parametru
= rychlejsi pri porovnavani zda je to jeste tank, nebo vysledek tanku
= pomalejsi pri pripojovani parametru, ale stejne se tenhle pruchod musi provist
  takze se mozna vlastne provede dopredu

Slozitejsi GC:
	http://bredy.vyletnici.net/?g=clanek&c=239

kouknout se na isatty - vstup z terminalu/standartni

----------------------------------------------
Bonus
defm = definice memorizovane funkce u ktere se pamatuji vysledky

Nejak takto:?
	[defm fib [1] 1]
	[defm fib [2] 1]
	[defm fib [n] [+ [fib [- n 1]] [fib [- n 2]]]]

Funkce apply!
(define a '(1 2 3 4))

(apply + a)

----------------------------------------------

Co tohle?

List comprehension
	http://en.wikipedia.org/wiki/List_comprehension

Clojure
	http://clojure.org/functional_programming

nil - means false or empty list

----------------------------------------------

Vrstvy:
	- zavolani funkce s danymi parametry
	- sestaveni tela funkce a doplneni parametru kde je to nutne
	- zjisteni zda neni funkce tank, pokud jo, hazet do nej parametry
	  a volat jej dokud neni funkce nebo blbost -> error
	- vraceni tanku s volanim ziskane funkce a zbyvajicimi parametry

Tohle cele provadet tak dlouho dokud se nevrati neco co neni tank


----------------------------------------------

Nejake odkazy
	http://itblob.havrlant.net/lisp-iii
	http://www.ceng.metu.edu.tr/~ucoluk/research/lisp/lispman/lispman.html
