!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
A	priklady/lisp.c	105;"	d	file:
AND	priklady/lisp.c	45;"	d	file:
Atab	priklady/lisp.c	/^struct Atomtable {char name[16]; int32 L; int32 bl; int32 plist;} Atab[n];$/;"	v	typeref:struct:Atomtable
Atomtable	priklady/lisp.c	/^struct Atomtable {char name[16]; int32 L; int32 bl; int32 plist;} Atab[n];$/;"	s	file:
B	priklady/lisp.c	106;"	d	file:
BLANK	priklady/lisp.c	365;"	d	file:
BOOL	structs.h	/^	BOOL,$/;"	e	enum:__anon2
BUILT_IN	structs.h	22;"	d
CHVAL	priklady/lisp.c	370;"	d	file:
CISLO	structs.h	/^	CISLO,$/;"	e	enum:__anon2
CLOSEP	priklady/lisp.c	364;"	d	file:
DIGIT	priklady/lisp.c	371;"	d	file:
DOT	priklady/lisp.c	367;"	d	file:
E1	priklady/lisp.c	594;"	d	file:
E2	priklady/lisp.c	595;"	d	file:
EOF	priklady/lisp.c	40;"	d	file:
EOS	priklady/lisp.c	41;"	d	file:
EQ	priklady/lisp.c	43;"	d	file:
E_HODNOTA	structs.h	/^} E_HODNOTA;$/;"	t	typeref:enum:__anon2
E_TYP	structs.h	/^} E_TYP;$/;"	t	typeref:enum:__anon1
Environment	priklady/lisp.py	/^class Environment:$/;"	c
Error	priklady/lisp.py	/^class Error(Exception): pass$/;"	c
Evalable	priklady/lisp.py	/^class Evalable:$/;"	c
FUNKCE	structs.h	/^	FUNKCE,$/;"	e	enum:__anon1
FUNKCE_H	funkce.h	2;"	d
FunctionObject	priklady/lisp.py	/^class FunctionObject(Evalable):$/;"	c
Funkce	structs.h	/^} Funkce;$/;"	t	typeref:struct:SFunkce
HEADERS	Makefile	/^HEADERS = structs.h funkce.h helpers.h$/;"	m
HELPER_H	helpers.h	2;"	d
HODNOTA	structs.h	/^	HODNOTA,$/;"	e	enum:__anon1
Hodnota	structs.h	/^} Hodnota;$/;"	t	typeref:struct:SHodnota
ISLOWER	priklady/lisp.c	373;"	d	file:
Insave	priklady/lisp.c	/^struct Insave$/;"	s	file:
L	priklady/lisp.c	/^struct Atomtable {char name[16]; int32 L; int32 bl; int32 plist;} Atab[n];$/;"	m	struct:Atomtable	file:
L	priklady/lisp.rb	/^def L(*a); list(*a) end$/;"	f
LambdaObject	priklady/lisp.py	/^class LambdaObject(Evalable):$/;"	c
Lisper	priklady/lisp.py	/^class Lisper:$/;"	c
List	structs.h	/^} List;$/;"	t	typeref:struct:SList
ListObject	priklady/lisp.py	/^class ListObject(Evalable):$/;"	c
Listarea	priklady/lisp.c	/^struct Listarea {int32 car; int32 cdr;} *P;$/;"	s	file:
LogicObject	priklady/lisp.py	/^class LogicObject(Evalable):$/;"	c
MINUS	priklady/lisp.c	369;"	d	file:
MacroObject	priklady/lisp.py	/^class MacroObject(Evalable):$/;"	c
NAME	Makefile	/^NAME = pseudolisp$/;"	m
NBI	priklady/lisp.c	247;"	d	file:
NOT	priklady/lisp.c	46;"	d	file:
NOT_BUILT_IN	structs.h	23;"	d
NULL	priklady/lisp.c	38;"	d	file:
Ntab	priklady/lisp.c	/^union Numbertable {double num; int16 nlink;} Ntab[n];$/;"	v	typeref:union:Numbertable
NumberObject	priklady/lisp.py	/^class NumberObject(Evalable):$/;"	c
Numbertable	priklady/lisp.c	/^union Numbertable {double num; int16 nlink;} Ntab[n];$/;"	u	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OPENP	priklady/lisp.c	363;"	d	file:
OR	priklady/lisp.c	44;"	d	file:
ObjectObject	priklady/lisp.py	/^class ObjectObject(Evalable):$/;"	c
P	priklady/lisp.c	/^struct Listarea {int32 car; int32 cdr;} *P;$/;"	v	typeref:struct:Listarea
PARAMETR	structs.h	/^	PARAMETR$/;"	e	enum:__anon1
PARAMS	Makefile	/^PARAMS = -std=c99 -g -Wall -pedantic$/;"	m
PLUS	priklady/lisp.c	368;"	d	file:
PairObject	priklady/lisp.py	/^class PairObject(Evalable):$/;"	c
Q	priklady/lisp.rb	/^def Q(a); list("quote", a) end$/;"	f
QL	priklady/lisp.rb	/^def QL(*a); list("quote", list(*a)) end$/;"	f	class:Q
Reader	priklady/lisp.py	/^class Reader:$/;"	c
Return	priklady/lisp.c	597;"	d	file:
SEZNAM	structs.h	/^	SEZNAM,$/;"	e	enum:__anon1
SFunkce	structs.h	/^typedef struct SFunkce {$/;"	s
SHodnota	structs.h	/^typedef struct SHodnota {$/;"	s
SINGLEQ	priklady/lisp.c	366;"	d	file:
SList	structs.h	/^typedef struct SList {$/;"	s
SRC	Makefile	/^SRC = ${NAME}.c structs.c funkce.c helpers.c testy.c$/;"	m
STRUCT_H	structs.h	2;"	d
STank	structs.h	/^typedef struct STank {$/;"	s
StringObject	priklady/lisp.py	/^class StringObject(Evalable):$/;"	c
Symbol	structs.h	/^} Symbol;$/;"	t	typeref:struct:__anon3
SymbolObject	priklady/lisp.py	/^class SymbolObject(Evalable):$/;"	c
SyntaxObject	priklady/lisp.py	/^class SyntaxObject(Evalable):$/;"	c
TAB	priklady/lisp.c	476;"	d	file:
TANK	structs.h	/^	TANK,$/;"	e	enum:__anon1
TESTY	testy.h	2;"	d
TOUPPER	priklady/lisp.c	372;"	d	file:
Tank	structs.h	/^} Tank;$/;"	t	typeref:struct:STank
TestLisp	priklady/lisp.rb	/^class TestLisp < Test::Unit::TestCase$/;"	c	class:Q
U1	priklady/lisp.c	592;"	d	file:
U2	priklady/lisp.c	593;"	d	file:
UnboundSymbolError	priklady/lisp.py	/^class UnboundSymbolError(Error): pass$/;"	c
VERSION	Makefile	/^VERSION = 0.0.0$/;"	m
ZNAK	structs.h	/^	ZNAK,$/;"	e	enum:__anon2
_	priklady/lisp.rb	/^def _$/;"	f
__add__	priklady/lisp.py	/^    def __add__(self, other):$/;"	m	class:NumberObject	file:
__and__	priklady/lisp.py	/^    def __and__(self, other):$/;"	m	class:ListObject	file:
__and__	priklady/lisp.py	/^    def __and__(self, other):$/;"	m	class:LogicObject	file:
__cmp__	priklady/lisp.py	/^    def __cmp__(self, other):$/;"	m	class:LogicObject	file:
__cmp__	priklady/lisp.py	/^    def __cmp__(self, other):$/;"	m	class:NumberObject	file:
__div__	priklady/lisp.py	/^    def __div__(self, other):$/;"	m	class:NumberObject	file:
__getitem__	priklady/lisp.py	/^    def __getitem__(self, i):$/;"	m	class:ListObject	file:
__getitem__	priklady/lisp.py	/^    def __getitem__(self, index):$/;"	m	class:StringObject	file:
__hash__	priklady/lisp.py	/^    def __hash__(self):$/;"	m	class:SymbolObject	file:
__init__	priklady/lisp.py	/^    def __init__(self, a, d):$/;"	m	class:PairObject
__init__	priklady/lisp.py	/^    def __init__(self, bindings, code, env):$/;"	m	class:LambdaObject
__init__	priklady/lisp.py	/^    def __init__(self, bindings, code, env):$/;"	m	class:MacroObject
__init__	priklady/lisp.py	/^    def __init__(self, fn):$/;"	m	class:FunctionObject
__init__	priklady/lisp.py	/^    def __init__(self, fn):$/;"	m	class:SyntaxObject
__init__	priklady/lisp.py	/^    def __init__(self, iostreams=(sys.stdin, sys.stdout, sys.stderr)):$/;"	m	class:Lisper
__init__	priklady/lisp.py	/^    def __init__(self, lst=None):$/;"	m	class:ListObject
__init__	priklady/lisp.py	/^    def __init__(self, name):$/;"	m	class:SymbolObject
__init__	priklady/lisp.py	/^    def __init__(self, name, *attrs, **opts):$/;"	m	class:ObjectObject
__init__	priklady/lisp.py	/^    def __init__(self, parent=None, bindings=None):$/;"	m	class:Environment
__init__	priklady/lisp.py	/^    def __init__(self, str):$/;"	m	class:StringObject
__init__	priklady/lisp.py	/^    def __init__(self, str=None):$/;"	m	class:Reader
__init__	priklady/lisp.py	/^    def __init__(self, value):$/;"	m	class:LogicObject
__init__	priklady/lisp.py	/^    def __init__(self, value):$/;"	m	class:NumberObject
__len__	priklady/lisp.py	/^    def __len__(self):$/;"	m	class:ListObject	file:
__mod__	priklady/lisp.py	/^    def __mod__(self, other):$/;"	m	class:NumberObject	file:
__mul__	priklady/lisp.py	/^    def __mul__(self, other):$/;"	m	class:NumberObject	file:
__neg__	priklady/lisp.py	/^    def __neg__(self):$/;"	m	class:LogicObject	file:
__or__	priklady/lisp.py	/^    def __or__(self, other):$/;"	m	class:LogicObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:Environment	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:FunctionObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:LambdaObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:ListObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:LogicObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:MacroObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:NumberObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:ObjectObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:PairObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:StringObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:SymbolObject	file:
__repr__	priklady/lisp.py	/^    def __repr__(self):$/;"	m	class:SyntaxObject	file:
__sub__	priklady/lisp.py	/^    def __sub__(self, other):$/;"	m	class:NumberObject	file:
add_pound_helper	priklady/lisp.py	/^    def add_pound_helper(self, char, helper):$/;"	m	class:Lisper
add_pound_helper	priklady/lisp.py	/^    def add_pound_helper(self, char, helper):$/;"	m	class:Reader
and.	priklady/jmc.lisp	/^(defun and. (x y)$/;"	f
append	priklady/lisp.py	/^    def append(self, lst):$/;"	m	class:ListObject
append.	priklady/jmc.lisp	/^(defun append. (x y)$/;"	f
array_to_List	structs.c	/^List *array_to_List(Symbol **seznam_symbolu, int pocet_symbolu)$/;"	f
assoc	priklady/lisp.py	/^    def assoc(self, item):$/;"	m	class:ListObject
assoc.	priklady/jmc.lisp	/^(defun assoc. (x y)$/;"	f
bf	priklady/lisp.c	123;"	d	file:
bl	priklady/lisp.c	/^struct Atomtable {char name[16]; int32 L; int32 bl; int32 plist;} Atab[n];$/;"	m	struct:Atomtable	file:
bs	priklady/lisp.c	124;"	d	file:
built_in	structs.h	/^	int built_in : 1;$/;"	m	struct:SFunkce
builtin	priklady/lisp.c	112;"	d	file:
call	funkce.c	/^Symbol *call(Funkce *f, List *parametry)$/;"	f
car	priklady/lisp.c	/^struct Listarea {int32 car; int32 cdr;} *P;$/;"	m	struct:Listarea	file:
cdr	priklady/lisp.c	/^struct Listarea {int32 car; int32 cdr;} *P;$/;"	m	struct:Listarea	file:
cilp	priklady/lisp.c	278;"	d	file:
cislo	structs.h	/^		int cislo;$/;"	m	union:SHodnota::__anon4
compile	priklady/lisp.py	/^    def compile(self):$/;"	m	class:LambdaObject
cons	priklady/lisp.py	/^    def cons(self, item):$/;"	m	class:ListObject
cons	priklady/lisp.py	/^    def cons(self, item):$/;"	m	class:SymbolObject
ct	priklady/lisp.c	/^int16 ct= 0, tracesw= 0;$/;"	v
currentin	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
dalsi	structs.h	/^	struct SList *dalsi;$/;"	m	struct:SList	typeref:struct:SList::SList
do_add	priklady/lisp.py	/^    def do_add(self, env, args):$/;"	m	class:Lisper
do_and	priklady/lisp.py	/^    def do_and(self, env, args):$/;"	m	class:Lisper
do_append	priklady/lisp.py	/^    def do_append(self, env, args):$/;"	m	class:Lisper
do_apply	priklady/lisp.py	/^    def do_apply(self, env, args):$/;"	m	class:Lisper
do_assoc	priklady/lisp.py	/^    def do_assoc(self, env, args):$/;"	m	class:Lisper
do_cons	priklady/lisp.py	/^    def do_cons(self, env, args):$/;"	m	class:Lisper
do_div	priklady/lisp.py	/^    def do_div(self, env, args):$/;"	m	class:Lisper
do_elt	priklady/lisp.py	/^    def do_elt(self, env, args):$/;"	m	class:Lisper
do_env_get	priklady/lisp.py	/^    def do_env_get(self, env, args):$/;"	m	class:Lisper
do_env_set	priklady/lisp.py	/^    def do_env_set(self, env, args):$/;"	m	class:Lisper
do_eql	priklady/lisp.py	/^    def do_eql(self, env, args):$/;"	m	class:Lisper
do_eval	priklady/lisp.py	/^    def do_eval(self, env, args):$/;"	m	class:Lisper
do_first	priklady/lisp.py	/^    def do_first(self, env, args):$/;"	m	class:Lisper
do_ge	priklady/lisp.py	/^    def do_ge(self, env, args):$/;"	m	class:Lisper
do_gensym	priklady/lisp.py	/^    def do_gensym(self, env, args):$/;"	m	class:Lisper
do_get	priklady/lisp.py	/^    def do_get(self, env, args):$/;"	m	class:Lisper
do_get_environment	priklady/lisp.py	/^    def do_get_environment(self, env, args):$/;"	m	class:Lisper
do_gt	priklady/lisp.py	/^    def do_gt(self, env, args):$/;"	m	class:Lisper
do_kw_to_pyhash	priklady/lisp.py	/^    def do_kw_to_pyhash(self, env, args):$/;"	m	class:Lisper
do_le	priklady/lisp.py	/^    def do_le(self, env, args):$/;"	m	class:Lisper
do_list	priklady/lisp.py	/^    def do_list(self, env, args):$/;"	m	class:Lisper
do_listp	priklady/lisp.py	/^    def do_listp(self, env, args):$/;"	m	class:Lisper
do_logic	priklady/lisp.py	/^    def do_logic(self, env, args):$/;"	m	class:Lisper
do_logicp	priklady/lisp.py	/^    def do_logicp(self, env, args):$/;"	m	class:Lisper
do_lt	priklady/lisp.py	/^    def do_lt(self, env, args):$/;"	m	class:Lisper
do_m_begin	priklady/lisp.py	/^    def do_m_begin(self, env, args):$/;"	m	class:Lisper
do_m_cond	priklady/lisp.py	/^    def do_m_cond(self, env, args):$/;"	m	class:Lisper
do_m_if	priklady/lisp.py	/^    def do_m_if(self, env, args):$/;"	m	class:Lisper
do_m_iquote	priklady/lisp.py	/^    def do_m_iquote(self, env, args):$/;"	m	class:Lisper
do_m_lambda	priklady/lisp.py	/^    def do_m_lambda(self, env, args):$/;"	m	class:Lisper
do_m_let	priklady/lisp.py	/^    def do_m_let(self, env, args):$/;"	m	class:Lisper
do_m_macro	priklady/lisp.py	/^    def do_m_macro(self, env, args):$/;"	m	class:Lisper
do_m_macro_expand	priklady/lisp.py	/^    def do_m_macro_expand(self, env, args):$/;"	m	class:Lisper
do_m_quote	priklady/lisp.py	/^    def do_m_quote(self, env, args):$/;"	m	class:Lisper
do_m_setq	priklady/lisp.py	/^    def do_m_setq(self, env, args):$/;"	m	class:Lisper
do_m_with_hash	priklady/lisp.py	/^    def do_m_with_hash(self, env, args):$/;"	m	class:Lisper
do_mod	priklady/lisp.py	/^    def do_mod(self, env, args):$/;"	m	class:Lisper
do_mul	priklady/lisp.py	/^    def do_mul(self, env, args):$/;"	m	class:Lisper
do_neq	priklady/lisp.py	/^    def do_neq(self, env, args):$/;"	m	class:Lisper
do_not	priklady/lisp.py	/^    def do_not(self, env, args):$/;"	m	class:Lisper
do_nullp	priklady/lisp.py	/^    def do_nullp(self, env, args):$/;"	m	class:Lisper
do_numberp	priklady/lisp.py	/^    def do_numberp(self, env, args):$/;"	m	class:Lisper
do_or	priklady/lisp.py	/^    def do_or(self, env, args):$/;"	m	class:Lisper
do_pairp	priklady/lisp.py	/^    def do_pairp(self, env, args):$/;"	m	class:Lisper
do_print	priklady/lisp.py	/^    def do_print(self, env, args):$/;"	m	class:Lisper
do_put	priklady/lisp.py	/^    def do_put(self, env, args):$/;"	m	class:Lisper
do_py_eval	priklady/lisp.py	/^    def do_py_eval(self, env, args):$/;"	m	class:Lisper
do_py_exec	priklady/lisp.py	/^    def do_py_exec(self, env, args):$/;"	m	class:Lisper
do_py_format	priklady/lisp.py	/^    def do_py_format(self, env, args):$/;"	m	class:Lisper
do_py_type	priklady/lisp.py	/^    def do_py_type(self, env, args):$/;"	m	class:Lisper
do_read	priklady/lisp.py	/^    def do_read(self, env, args):$/;"	m	class:Lisper
do_replaca	priklady/lisp.py	/^    def do_replaca(self, env, args):$/;"	m	class:Lisper
do_replacd	priklady/lisp.py	/^    def do_replacd(self, env, args):$/;"	m	class:Lisper
do_rest	priklady/lisp.py	/^    def do_rest(self, env, args):$/;"	m	class:Lisper
do_second	priklady/lisp.py	/^    def do_second(self, env, args):$/;"	m	class:Lisper
do_send	priklady/lisp.py	/^    def do_send(self, env, args):$/;"	m	class:Lisper
do_stringp	priklady/lisp.py	/^    def do_stringp(self, env, args):$/;"	m	class:Lisper
do_sub	priklady/lisp.py	/^    def do_sub(self, env, args):$/;"	m	class:Lisper
do_symbol_name	priklady/lisp.py	/^    def do_symbol_name(self, env, args):$/;"	m	class:Lisper
do_symbolp	priklady/lisp.py	/^    def do_symbolp(self, env, args):$/;"	m	class:Lisper
do_the_environment	priklady/lisp.py	/^    def do_the_environment(self, env, args):$/;"	m	class:Lisper
do_third	priklady/lisp.py	/^    def do_third(self, env, args):$/;"	m	class:Lisper
do_top_level	priklady/lisp.py	/^    def do_top_level(self, env, args):$/;"	m	class:Lisper
dottedpair	priklady/lisp.c	114;"	d	file:
e	priklady/lisp.c	/^int32 e(void)$/;"	f
eaL	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
eaLp	priklady/lisp.c	279;"	d	file:
env	priklady/lisp.c	/^jmp_buf env;         \/* struct to hold environment for longjump *\/$/;"	v
equals	priklady/lisp.rb	/^  def equals(value, predicate)$/;"	f	class:Q.TestLisp
error	priklady/lisp.c	/^void error(char *msg)$/;"	f
eval	priklady/lisp.py	/^    def eval(self, env, args):$/;"	m	class:FunctionObject
eval	priklady/lisp.py	/^    def eval(self, env, args):$/;"	m	class:LambdaObject
eval	priklady/lisp.py	/^    def eval(self, env, args):$/;"	m	class:MacroObject
eval	priklady/lisp.py	/^    def eval(self, env, args):$/;"	m	class:SyntaxObject
eval	priklady/lisp.py	/^    def eval(self, env, args=None):$/;"	m	class:ListObject
eval	priklady/lisp.py	/^    def eval(self, env, args=None):$/;"	m	class:LogicObject
eval	priklady/lisp.py	/^    def eval(self, env, args=None):$/;"	m	class:NumberObject
eval	priklady/lisp.py	/^    def eval(self, env, args=None):$/;"	m	class:StringObject
eval	priklady/lisp.py	/^    def eval(self, env, args=None):$/;"	m	class:SymbolObject
eval	priklady/lisp.py	/^    def eval(self, environment, args=None):$/;"	m	class:Evalable
eval	priklady/lisp.py	/^    def eval(self, form):$/;"	m	class:Lisper
eval.	priklady/jmc.lisp	/^(defun eval. (e a)$/;"	f
evalstring	priklady/lisp.py	/^    def evalstring(self, str):$/;"	m	class:Lisper
evcon.	priklady/jmc.lisp	/^(defun evcon. (c a)$/;"	f
evlis.	priklady/jmc.lisp	/^(defun evlis. (m a)$/;"	f
expand	priklady/lisp.py	/^    def expand(self, env, args):$/;"	m	class:MacroObject
fct	priklady/lisp.c	115;"	d	file:
fctform	priklady/lisp.c	111;"	d	file:
fgetline	priklady/lisp.c	/^int16 fgetline(char *s, int16 lim, FILE *stream)$/;"	f
filep	priklady/lisp.c	/^   {struct Insave *link; char *pg, *pge; char g[202]; FILE *filep;};$/;"	m	struct:Insave	file:
filep	priklady/lisp.c	/^FILE *filep;$/;"	v
fillg	priklady/lisp.c	/^void fillg(void)$/;"	f
filter	funkce.c	/^Symbol *filter(Funkce *f, List *l)$/;"	f
first	priklady/lisp.py	/^    def first(self):$/;"	m	class:ListObject
first	priklady/lisp.py	/^    def first(self):$/;"	m	class:PairObject
forward	priklady/lisp.c	24;"	d	file:
fp	priklady/lisp.c	/^int16 fp= -1;$/;"	v
funkce	structs.h	/^	Funkce *funkce;$/;"	m	struct:STank
funkcni_testy	testy.c	/^static int funkcni_testy()$/;"	f	file:
g	priklady/lisp.c	/^   {struct Insave *link; char *pg, *pge; char g[202]; FILE *filep;};$/;"	m	struct:Insave	file:
g	priklady/lisp.c	/^char *g,*pg,*pge;$/;"	v
gc	priklady/lisp.c	/^void gc(void)$/;"	f
gcmark	priklady/lisp.c	/^void gcmark(int32 p)$/;"	f
get	priklady/lisp.py	/^    def get(self, property):$/;"	m	class:SymbolObject
get	priklady/lisp.py	/^    def get(self, sym):$/;"	m	class:Environment
get	priklady/lisp.py	/^    def get(self, sym, property):$/;"	m	class:Lisper
get_sexpr	priklady/lisp.py	/^    def get_sexpr(self, str=None):$/;"	m	class:Reader
get_token	priklady/lisp.py	/^    def get_token(self):$/;"	m	class:Reader
getgchar	priklady/lisp.c	/^char getgchar(void)$/;"	f
h	structs.h	/^	} h;$/;"	m	struct:SHodnota	typeref:union:SHodnota::__anon4
hashname	priklady/lisp.c	514;"	d	file:
hashnum	priklady/lisp.c	492;"	d	file:
immortal	structs.h	/^	int immortal : 1;$/;"	m	struct:__anon3
init	priklady/lisp.py	/^    def init(self):$/;"	m	class:Environment
init	priklady/lisp.py	/^    def init(self):$/;"	m	class:Lisper
init	pseudolisp.c	/^int init()$/;"	f
initialize	priklady/lisp.rb	/^  def initialize$/;"	f	class:Q.QL
initlisp	priklady/lisp.c	/^void initlisp(void)$/;"	f
int16	priklady/lisp.c	22;"	d	file:
int32	priklady/lisp.c	23;"	d	file:
intern	priklady/lisp.py	/^    def intern(self, sym, val):$/;"	m	class:Lisper
iquote	priklady/lisp.py	/^    def iquote(self, env):$/;"	m	class:ListObject
is_symbol_cislo	funkce.c	/^static int is_symbol_cislo(Symbol *s)$/;"	f	file:
is_symbol_tank	funkce.c	/^static int is_symbol_tank(Symbol *s)$/;"	f	file:
lexical_intern	priklady/lisp.py	/^    def lexical_intern(self, sym, val):$/;"	m	class:Lisper
lexical_set	priklady/lisp.py	/^    def lexical_set(self, sym, value):$/;"	m	class:Environment
link	priklady/lisp.c	/^   {struct Insave *link; char *pg, *pge; char g[202]; FILE *filep;};$/;"	m	struct:Insave	typeref:struct:Insave::Insave	file:
lisp	priklady/lisp.rb	/^def lisp(&block)$/;"	f	class:Q
list.	priklady/jmc.lisp	/^(defun list. (x y)$/;"	f
listove_testy	testy.c	/^static int listove_testy()$/;"	f	file:
listp	priklady/lisp.c	929;"	d	file:
logfilep	priklady/lisp.c	/^FILE *logfilep;$/;"	v
lookgchar	priklady/lisp.c	/^char lookgchar(void)$/;"	f
lookup	priklady/lisp.py	/^    def lookup(self, sym):$/;"	m	class:Lisper
m	priklady/lisp.c	49;"	d	file:
main	priklady/lisp.c	/^void main(void)$/;"	f
main	pseudolisp.c	/^int main(int argc, char *argv[])$/;"	f
map	funkce.c	/^Symbol *map(Funkce *f, List *l)$/;"	f
marked	priklady/lisp.c	896;"	d	file:
marknode	priklady/lisp.c	897;"	d	file:
marknum	priklady/lisp.c	928;"	d	file:
method_missing	priklady/lisp.rb	/^  def method_missing(m, *a)$/;"	f	class:Q
n	priklady/lisp.c	48;"	d	file:
name	priklady/lisp.c	/^struct Atomtable {char name[16]; int32 L; int32 bl; int32 plist;} Atab[n];$/;"	m	struct:Atomtable	file:
namedfsf	priklady/lisp.c	117;"	d	file:
nconc	priklady/lisp.py	/^    def nconc(self, lst):$/;"	m	class:ListObject
new_Funkce	structs.c	/^Funkce *new_Funkce(List *telo_funkce, int pocet_parametru)$/;"	f
new_Hodnota	structs.c	/^Hodnota *new_Hodnota(E_HODNOTA typ, int co)$/;"	f
new_List	structs.c	/^List *new_List(Symbol *symbol)$/;"	f
new_Symbol	structs.c	/^Symbol *new_Symbol(E_TYP typ, void *symbol)$/;"	f
new_Tank	structs.c	/^Tank *new_Tank(Funkce *fce, List *parametry)$/;"	f
new_temp_name	helpers.c	/^char *new_temp_name()$/;"	f
newloc	priklady/lisp.c	/^int32 newloc(int32 x, int32 y)$/;"	f
nf	priklady/lisp.c	/^int16 nf= -1;$/;"	v
nilptr	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
nlink	priklady/lisp.c	/^union Numbertable {double num; int16 nlink;} Ntab[n];$/;"	m	union:Numbertable	file:
nmark	priklady/lisp.c	/^char nmark[n]; \/* an array of 1-bit entries would suffice *\/$/;"	v
not.	priklady/jmc.lisp	/^(defun not. (x)$/;"	f
nu	priklady/lisp.c	122;"	d	file:
null.	priklady/jmc.lisp	/^(defun null. (x)$/;"	f
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:Environment
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:FunctionObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:LambdaObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:ListObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:LogicObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:MacroObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:NumberObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:PairObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:StringObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:SymbolObject
nullp	priklady/lisp.py	/^    def nullp(self):$/;"	m	class:SyntaxObject
num	priklady/lisp.c	/^union Numbertable {double num; int16 nlink;} Ntab[n];$/;"	m	union:Numbertable	file:
numatom	priklady/lisp.c	/^int32 numatom(double r)$/;"	f
numf	priklady/lisp.c	/^int32 numf;$/;"	v
nx	priklady/lisp.c	/^int16 nx[n];$/;"	v
oa	priklady/lisp.c	121;"	d	file:
odkaz	structs.h	/^		Symbol *(*odkaz)(List *);$/;"	m	union:SFunkce::__anon5
odkaz	structs.h	/^	void *odkaz;$/;"	m	struct:__anon3
ordatom	priklady/lisp.c	/^int32 ordatom (char *s)$/;"	f
ourprint	priklady/lisp.c	/^void ourprint(char *s)$/;"	f
pair.	priklady/jmc.lisp	/^(defun pair. (x y)$/;"	f
parametry	structs.h	/^	List *parametry;$/;"	m	struct:STank
pb	priklady/lisp.c	/^int32 pb= 0;$/;"	v
pg	priklady/lisp.c	/^   {struct Insave *link; char *pg, *pge; char g[202]; FILE *filep;};$/;"	m	struct:Insave	file:
pg	priklady/lisp.c	/^char *g,*pg,*pge;$/;"	v
pge	priklady/lisp.c	/^   {struct Insave *link; char *pg, *pge; char g[202]; FILE *filep;};$/;"	m	struct:Insave	file:
pge	priklady/lisp.c	/^char *g,*pg,*pge;$/;"	v
plist	priklady/lisp.c	/^struct Atomtable {char name[16]; int32 L; int32 bl; int32 plist;} Atab[n];$/;"	m	struct:Atomtable	file:
plus	funkce.c	/^Symbol *plus(List *parametry)$/;"	f
pocet_parametru	structs.h	/^	int pocet_parametru; \/\/ + pocet_obsazenych_parametru?$/;"	m	struct:SFunkce
pop	priklady/lisp.py	/^    def pop(self):$/;"	m	class:Environment
pop_e	priklady/lisp.py	/^    def pop_e(self):$/;"	m	class:Lisper
prompt	priklady/lisp.c	/^char prompt;$/;"	v
ptrv	priklady/lisp.c	109;"	d	file:
push	priklady/lisp.py	/^    def push(self, bindings=None):$/;"	m	class:Environment
push_e	priklady/lisp.py	/^    def push_e(self, env=None):$/;"	m	class:Lisper
put	priklady/lisp.py	/^    def put(self, property, value):$/;"	m	class:SymbolObject
quoteptr	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
raw_input	priklady/lisp.py	/^    def raw_input(self, prompt) :$/;"	m	class:Lisper
read	priklady/lisp.py	/^    def read(self, file):$/;"	m	class:Lisper
read_full_sexp	priklady/lisp.py	/^    def read_full_sexp(self, line="", parenlevel=0):$/;"	m	class:Lisper
reduce	funkce.c	/^Symbol *reduce(Funkce *f, List *l)$/;"	f
repl	priklady/lisp.py	/^    def repl(self):$/;"	m	class:Lisper
repl_d	priklady/lisp.py	/^    def repl_d(self):$/;"	m	class:Lisper
replaca	priklady/lisp.py	/^    def replaca(self, val):$/;"	m	class:ListObject
replaca	priklady/lisp.py	/^    def replaca(self, val):$/;"	m	class:PairObject
replacd	priklady/lisp.py	/^    def replacd(self, val):$/;"	m	class:ListObject
replacd	priklady/lisp.py	/^    def replacd(self, val):$/;"	m	class:PairObject
rest	priklady/lisp.py	/^    def rest(self):$/;"	m	class:ListObject
rest	priklady/lisp.py	/^    def rest(self):$/;"	m	class:PairObject
se	priklady/lisp.c	120;"	d	file:
second	priklady/lisp.py	/^    def second(self):$/;"	m	class:ListObject
second	priklady/lisp.py	/^    def second(self):$/;"	m	class:PairObject
set	priklady/lisp.py	/^    def set(self, sym, propery, value):$/;"	m	class:Lisper
set	priklady/lisp.py	/^    def set(self, sym, value):$/;"	m	class:Environment
seval	priklady/lisp.c	/^int32 seval(int32 p)$/;"	f
sexp	priklady/lisp.c	110;"	d	file:
sk	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
skp	priklady/lisp.c	280;"	d	file:
sout	priklady/lisp.c	/^char *sout;          \/* general output buffer pointer *\/$/;"	v
spacerpt	priklady/lisp.c	/^void spacerpt(int32 r)$/;"	f
sread	priklady/lisp.c	/^int32 sread(void)$/;"	f
struktura	structs.h	/^		List *struktura;$/;"	m	union:SFunkce::__anon5
swrite	priklady/lisp.c	/^void swrite(int32 j)$/;"	f
symbol	structs.h	/^	Symbol *symbol;$/;"	m	struct:SList
telo	structs.h	/^	} telo;$/;"	m	struct:SFunkce	typeref:union:SFunkce::__anon5
test	testy.c	/^int test()$/;"	f
test_and	priklady/lisp.rb	/^  def test_and$/;"	f	class:Q.TestLisp
test_append	priklady/lisp.rb	/^  def test_append$/;"	f	class:Q.TestLisp
test_assoc	priklady/lisp.rb	/^  def test_assoc$/;"	f	class:Q.TestLisp
test_atom	priklady/lisp.rb	/^  def test_atom$/;"	f	class:Q.TestLisp
test_car	priklady/lisp.rb	/^  def test_car$/;"	f	class:Q.TestLisp
test_cdr	priklady/lisp.rb	/^  def test_cdr$/;"	f	class:Q.TestLisp
test_cond	priklady/lisp.rb	/^  def test_cond$/;"	f	class:Q.TestLisp
test_cons	priklady/lisp.rb	/^  def test_cons$/;"	f	class:Q.TestLisp
test_cxxr	priklady/lisp.rb	/^  def test_cxxr$/;"	f	class:Q.TestLisp
test_eq	priklady/lisp.rb	/^  def test_eq$/;"	f	class:Q.TestLisp
test_eval_basic	priklady/lisp.rb	/^  def test_eval_basic$/;"	f	class:Q.TestLisp
test_eval_complex	priklady/lisp.rb	/^  def test_eval_complex$/;"	f	class:Q.TestLisp
test_eval_cond	priklady/lisp.rb	/^  def test_eval_cond$/;"	f	class:Q.TestLisp
test_eval_cons	priklady/lisp.rb	/^  def test_eval_cons$/;"	f	class:Q.TestLisp
test_eval_let	priklady/lisp.rb	/^  def test_eval_let$/;"	f	class:Q.TestLisp
test_func_arith	priklady/lisp.rb	/^  def test_func_arith$/;"	f	class:Q.TestLisp
test_not	priklady/lisp.rb	/^  def test_not$/;"	f	class:Q.TestLisp
test_null	priklady/lisp.rb	/^  def test_null$/;"	f	class:Q.TestLisp
test_pair	priklady/lisp.rb	/^  def test_pair$/;"	f	class:Q.TestLisp
test_quote	priklady/lisp.rb	/^  def test_quote$/;"	f	class:Q.TestLisp
test_subst	priklady/lisp.rb	/^  def test_subst$/;"	f	class:Q.TestLisp
tf	priklady/lisp.c	127;"	d	file:
third	priklady/lisp.py	/^    def third(self):$/;"	m	class:ListObject
topInsave	priklady/lisp.c	/^struct Insave *topInsave;$/;"	v	typeref:struct:Insave
tp	priklady/lisp.c	118;"	d	file:
tptr	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
traceprint	priklady/lisp.c	/^void traceprint(int32 v, int16 osw)$/;"	f
traceptr	priklady/lisp.c	/^int32 nilptr,tptr,currentin,eaL,quoteptr,sk,traceptr;$/;"	v
tracesw	priklady/lisp.c	/^int16 ct= 0, tracesw= 0;$/;"	v
ts	priklady/lisp.c	128;"	d	file:
typ	structs.h	/^	E_HODNOTA typ;$/;"	m	struct:SHodnota
typ	structs.h	/^	E_TYP typ;$/;"	m	struct:__anon3
type	priklady/lisp.c	108;"	d	file:
ud	priklady/lisp.c	119;"	d	file:
uf	priklady/lisp.c	125;"	d	file:
unmark	priklady/lisp.c	898;"	d	file:
unnamedfsf	priklady/lisp.c	116;"	d	file:
unwind_e	priklady/lisp.py	/^    def unwind_e(self):$/;"	m	class:Lisper
us	priklady/lisp.c	126;"	d	file:
userdefd	priklady/lisp.c	113;"	d	file:
vypis_list	testy.c	/^static int vypis_list(List *l)$/;"	f	file:
znak	structs.h	/^		char znak;$/;"	m	union:SHodnota::__anon4
